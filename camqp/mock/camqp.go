// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shyam81992/Weather-Monster/camqp (interfaces: CAMQPinterface,CAMQPConninterface,CAMQPChannelinterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	camqp "github.com/shyam81992/Weather-Monster/camqp"
	amqp "github.com/streadway/amqp"
)

// MockCAMQPinterface is a mock of CAMQPinterface interface.
type MockCAMQPinterface struct {
	ctrl     *gomock.Controller
	recorder *MockCAMQPinterfaceMockRecorder
}

// MockCAMQPinterfaceMockRecorder is the mock recorder for MockCAMQPinterface.
type MockCAMQPinterfaceMockRecorder struct {
	mock *MockCAMQPinterface
}

// NewMockCAMQPinterface creates a new mock instance.
func NewMockCAMQPinterface(ctrl *gomock.Controller) *MockCAMQPinterface {
	mock := &MockCAMQPinterface{ctrl: ctrl}
	mock.recorder = &MockCAMQPinterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAMQPinterface) EXPECT() *MockCAMQPinterfaceMockRecorder {
	return m.recorder
}

// Publishmsg mocks base method.
func (m *MockCAMQPinterface) Publishmsg(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publishmsg", arg0)
}

// Publishmsg indicates an expected call of Publishmsg.
func (mr *MockCAMQPinterfaceMockRecorder) Publishmsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publishmsg", reflect.TypeOf((*MockCAMQPinterface)(nil).Publishmsg), arg0)
}

// MockCAMQPConninterface is a mock of CAMQPConninterface interface.
type MockCAMQPConninterface struct {
	ctrl     *gomock.Controller
	recorder *MockCAMQPConninterfaceMockRecorder
}

// MockCAMQPConninterfaceMockRecorder is the mock recorder for MockCAMQPConninterface.
type MockCAMQPConninterfaceMockRecorder struct {
	mock *MockCAMQPConninterface
}

// NewMockCAMQPConninterface creates a new mock instance.
func NewMockCAMQPConninterface(ctrl *gomock.Controller) *MockCAMQPConninterface {
	mock := &MockCAMQPConninterface{ctrl: ctrl}
	mock.recorder = &MockCAMQPConninterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAMQPConninterface) EXPECT() *MockCAMQPConninterfaceMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockCAMQPConninterface) Channel() (camqp.CAMQPChannelinterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(camqp.CAMQPChannelinterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockCAMQPConninterfaceMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockCAMQPConninterface)(nil).Channel))
}

// Close mocks base method.
func (m *MockCAMQPConninterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCAMQPConninterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCAMQPConninterface)(nil).Close))
}

// MockCAMQPChannelinterface is a mock of CAMQPChannelinterface interface.
type MockCAMQPChannelinterface struct {
	ctrl     *gomock.Controller
	recorder *MockCAMQPChannelinterfaceMockRecorder
}

// MockCAMQPChannelinterfaceMockRecorder is the mock recorder for MockCAMQPChannelinterface.
type MockCAMQPChannelinterfaceMockRecorder struct {
	mock *MockCAMQPChannelinterface
}

// NewMockCAMQPChannelinterface creates a new mock instance.
func NewMockCAMQPChannelinterface(ctrl *gomock.Controller) *MockCAMQPChannelinterface {
	mock := &MockCAMQPChannelinterface{ctrl: ctrl}
	mock.recorder = &MockCAMQPChannelinterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAMQPChannelinterface) EXPECT() *MockCAMQPChannelinterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCAMQPChannelinterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCAMQPChannelinterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCAMQPChannelinterface)(nil).Close))
}

// Publish mocks base method.
func (m *MockCAMQPChannelinterface) Publish(arg0, arg1 string, arg2, arg3 bool, arg4 amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockCAMQPChannelinterfaceMockRecorder) Publish(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockCAMQPChannelinterface)(nil).Publish), arg0, arg1, arg2, arg3, arg4)
}
